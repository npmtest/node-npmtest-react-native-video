{"/home/travis/build/npmtest/node-npmtest-react-native-video/test.js":"/* istanbul instrument in package npmtest_react_native_video */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-video/lib.npmtest_react_native_video.js":"/* istanbul instrument in package npmtest_react_native_video */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_video = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_video = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-video/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-video && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_video */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_video\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_video.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_video.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_video.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_video.__dirname + '/lib.npmtest_react_native_video.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-video/node_modules/react-native-video/Video.js":"import React, {Component, PropTypes} from 'react';\nimport {StyleSheet, requireNativeComponent, NativeModules, View, Image} from 'react-native';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport VideoResizeMode from './VideoResizeMode.js';\n\nconst styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n});\n\nexport default class Video extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showPoster: true,\n    };\n  }\n\n  setNativeProps(nativeProps) {\n    this._root.setNativeProps(nativeProps);\n  }\n\n  seek = (time) => {\n    this.setNativeProps({ seek: time });\n  };\n\n  presentFullscreenPlayer = () => {\n    this.setNativeProps({ fullscreen: true });\n  };\n\n  dismissFullscreenPlayer = () => {\n    this.setNativeProps({ fullscreen: false });\n  };\n\n  _assignRoot = (component) => {\n    this._root = component;\n  };\n\n  _onLoadStart = (event) => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart(event.nativeEvent);\n    }\n  };\n\n  _onLoad = (event) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n  };\n\n  _onError = (event) => {\n    if (this.props.onError) {\n      this.props.onError(event.nativeEvent);\n    }\n  };\n\n  _onProgress = (event) => {\n    if (this.props.onProgress) {\n      this.props.onProgress(event.nativeEvent);\n    }\n  };\n\n  _onSeek = (event) => {\n    if (this.state.showPoster) {\n      this.setState({showPoster: false});\n    }\n\n    if (this.props.onSeek) {\n      this.props.onSeek(event.nativeEvent);\n    }\n  };\n\n  _onEnd = (event) => {\n    if (this.props.onEnd) {\n      this.props.onEnd(event.nativeEvent);\n    }\n  };\n\n  _onFullscreenPlayerWillPresent = (event) => {\n    if (this.props.onFullscreenPlayerWillPresent) {\n      this.props.onFullscreenPlayerWillPresent(event.nativeEvent);\n    }\n  };\n\n  _onFullscreenPlayerDidPresent = (event) => {\n    if (this.props.onFullscreenPlayerDidPresent) {\n      this.props.onFullscreenPlayerDidPresent(event.nativeEvent);\n    }\n  };\n\n  _onFullscreenPlayerWillDismiss = (event) => {\n    if (this.props.onFullscreenPlayerWillDismiss) {\n      this.props.onFullscreenPlayerWillDismiss(event.nativeEvent);\n    }\n  };\n\n  _onFullscreenPlayerDidDismiss = (event) => {\n    if (this.props.onFullscreenPlayerDidDismiss) {\n      this.props.onFullscreenPlayerDidDismiss(event.nativeEvent);\n    }\n  };\n\n  _onReadyForDisplay = (event) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _onPlaybackStalled = (event) => {\n    if (this.props.onPlaybackStalled) {\n      this.props.onPlaybackStalled(event.nativeEvent);\n    }\n  };\n\n  _onPlaybackResume = (event) => {\n    if (this.props.onPlaybackResume) {\n      this.props.onPlaybackResume(event.nativeEvent);\n    }\n  };\n\n  _onPlaybackRateChange = (event) => {\n    if (this.state.showPoster && (event.nativeEvent.playbackRate !== 0)) {\n      this.setState({showPoster: false});\n    }\n\n    if (this.props.onPlaybackRateChange) {\n      this.props.onPlaybackRateChange(event.nativeEvent);\n    }\n  };\n\n  _onAudioBecomingNoisy = () => {\n    if (this.props.onAudioBecomingNoisy) {\n      this.props.onAudioBecomingNoisy();\n    }\n  };\n\n  _onAudioFocusChanged = (event) => {\n    if (this.props.onAudioFocusChanged) {\n      this.props.onAudioFocusChanged(event.nativeEvent);\n    }\n  };\n\n  _onBuffer = (event) => {\n    if (this.props.onBuffer) {\n      this.props.onBuffer(event.nativeEvent);\n    }\n  };\n\n  render() {\n    const resizeMode = this.props.resizeMode;\n    const source = resolveAssetSource(this.props.source) || {};\n\n    let uri = source.uri || '';\n    if (uri && uri.match(/^\\//)) {\n      uri = `file://${uri}`;\n    }\n\n    const isNetwork = !!(uri && uri.match(/^https?:/));\n    const isAsset = !!(uri && uri.match(/^(assets-library|file|content|ms-appx|ms-appdata):/));\n\n    let nativeResizeMode;\n    if (resizeMode === VideoResizeMode.stretch) {\n      nativeResizeMode = NativeModules.UIManager.RCTVideo.Constants.ScaleToFill;\n    } else if (resizeMode === VideoResizeMode.contain) {\n      nativeResizeMode = NativeModules.UIManager.RCTVideo.Constants.ScaleAspectFit;\n    } else if (resizeMode === VideoResizeMode.cover) {\n      nativeResizeMode = NativeModules.UIManager.RCTVideo.Constants.ScaleAspectFill;\n    } else {\n      nativeResizeMode = NativeModules.UIManager.RCTVideo.Constants.ScaleNone;\n    }\n\n    const nativeProps = Object.assign({}, this.props);\n    Object.assign(nativeProps, {\n      style: [styles.base, nativeProps.style],\n      resizeMode: nativeResizeMode,\n      src: {\n        uri,\n        isNetwork,\n        isAsset,\n        type: source.type || '',\n        mainVer: source.mainVer || 0,\n        patchVer: source.patchVer || 0,\n      },\n      onVideoLoadStart: this._onLoadStart,\n      onVideoLoad: this._onLoad,\n      onVideoError: this._onError,\n      onVideoProgress: this._onProgress,\n      onVideoSeek: this._onSeek,\n      onVideoEnd: this._onEnd,\n      onVideoBuffer: this._onBuffer,\n      onVideoFullscreenPlayerWillPresent: this._onFullscreenPlayerWillPresent,\n      onVideoFullscreenPlayerDidPresent: this._onFullscreenPlayerDidPresent,\n      onVideoFullscreenPlayerWillDismiss: this._onFullscreenPlayerWillDismiss,\n      onVideoFullscreenPlayerDidDismiss: this._onFullscreenPlayerDidDismiss,\n      onReadyForDisplay: this._onReadyForDisplay,\n      onPlaybackStalled: this._onPlaybackStalled,\n      onPlaybackResume: this._onPlaybackResume,\n      onPlaybackRateChange: this._onPlaybackRateChange,\n      onAudioFocusChanged: this._onAudioFocusChanged,\n      onAudioBecomingNoisy: this._onAudioBecomingNoisy,\n    });\n\n    if (this.props.poster && this.state.showPoster) {\n      const posterStyle = {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        resizeMode: 'contain',\n      };\n\n      return (\n        <View style={nativeProps.style}>\n          <RCTVideo\n            ref={this._assignRoot}\n            {...nativeProps}\n          />\n          <Image\n            style={posterStyle}\n            source={{uri: this.props.poster}}\n          />\n        </View>\n      );\n    }\n\n    return (\n      <RCTVideo\n        ref={this._assignRoot}\n        {...nativeProps}\n      />\n    );\n  }\n}\n\nVideo.propTypes = {\n  /* Native only */\n  src: PropTypes.object,\n  seek: PropTypes.number,\n  fullscreen: PropTypes.bool,\n  onVideoLoadStart: PropTypes.func,\n  onVideoLoad: PropTypes.func,\n  onVideoBuffer: PropTypes.func,\n  onVideoError: PropTypes.func,\n  onVideoProgress: PropTypes.func,\n  onVideoSeek: PropTypes.func,\n  onVideoEnd: PropTypes.func,\n  onVideoFullscreenPlayerWillPresent: PropTypes.func,\n  onVideoFullscreenPlayerDidPresent: PropTypes.func,\n  onVideoFullscreenPlayerWillDismiss: PropTypes.func,\n  onVideoFullscreenPlayerDidDismiss: PropTypes.func,\n\n  /* Wrapper component */\n  source: PropTypes.oneOfType([\n    PropTypes.shape({\n      uri: PropTypes.string\n    }),\n    // Opaque type returned by require('./video.mp4')\n    PropTypes.number\n  ]),\n  resizeMode: PropTypes.string,\n  poster: PropTypes.string,\n  repeat: PropTypes.bool,\n  paused: PropTypes.bool,\n  muted: PropTypes.bool,\n  volume: PropTypes.number,\n  rate: PropTypes.number,\n  playInBackground: PropTypes.bool,\n  playWhenInactive: PropTypes.bool,\n  disableFocus: PropTypes.bool,\n  controls: PropTypes.bool,\n  currentTime: PropTypes.number,\n  progressUpdateInterval: PropTypes.number,\n  onLoadStart: PropTypes.func,\n  onLoad: PropTypes.func,\n  onBuffer: PropTypes.func,\n  onError: PropTypes.func,\n  onProgress: PropTypes.func,\n  onSeek: PropTypes.func,\n  onEnd: PropTypes.func,\n  onFullscreenPlayerWillPresent: PropTypes.func,\n  onFullscreenPlayerDidPresent: PropTypes.func,\n  onFullscreenPlayerWillDismiss: PropTypes.func,\n  onFullscreenPlayerDidDismiss: PropTypes.func,\n  onReadyForDisplay: PropTypes.func,\n  onPlaybackStalled: PropTypes.func,\n  onPlaybackResume: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onAudioFocusChanged: PropTypes.func,\n  onAudioBecomingNoisy: PropTypes.func,\n\n  /* Required by react-native */\n  scaleX: PropTypes.number,\n  scaleY: PropTypes.number,\n  translateX: PropTypes.number,\n  translateY: PropTypes.number,\n  rotation: PropTypes.number,\n  ...View.propTypes,\n};\n\nconst RCTVideo = requireNativeComponent('RCTVideo', Video, {\n  nativeOnly: {\n    src: true,\n    seek: true,\n    fullscreen: true,\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-video/node_modules/react-native-video/VideoResizeMode.js":"import keyMirror from 'keymirror';\n\nexport default keyMirror({\n  contain: null,\n  cover: null,\n  stretch: null,\n});\n"}